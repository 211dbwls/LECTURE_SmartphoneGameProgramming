다음 YouTube 내용을 과제 본문에 요약하라

Git, GitHub
https://www.youtube.com/watch?v=YFNQwo7iTNc
https://www.youtube.com/watch?v=lPrxhA4PLoA

GitHub, SourceTree
https://www.youtube.com/watch?v=8AtHcXnJSdA
https://www.youtube.com/watch?v=FXDjmsiv8fI

Centralized Version Control  : 각 개발자들이 서버에 개발 내용을 업데이트하면 서버에서 즉각적으로 동기화가 이루어지는 시스템
                                       문제점 : 1. 서버에 문제가 생길 경우 개발 진행에 문제가 생김 2. 오프라인에서 사용 불가
Distributed Version Control : 서버 뿐만 아니라 모든 개발자들이 동일한 히스토리 정보를 가지고 있는 것
                                      문제점 : 1. 서버에 문제가 생겨도 다시 복구 가능 2. 오프라인에서 사용 가능

delta-based version control : 각 버전마다 변경된 내용만 가짐
                                      문제점 : 버전 별로 변경된 내용만 가지고 있기 때문에 내용을 변경할 때 어떤 것을 적용할지 등의 문제점들이 생김
snapshots : 프로젝트의  전체적인 내용을 가지고 있음
               브랜치들 사이에서 이동이 편리함

VCS(Version Control System) : 코드 뿐만 아니라 텍스트 파일, 그래픽 파일 등 다양한 파일을 관리
                                        snapshots 방법 사용
                                       
git : 형상 관리 시스템(Version Control System)의 한 종류로 프로그램 파일 저장할 때 사용
      모든 파일의 변화를 기록하며 같은 파일을 각기 다른 버전으로 보관
      서로 다른 파일을 한번에 관리가 가능
      여러 사람과 파일을 공유하며 사용 가능
      = 버전을 편리하게 관리할 수 있게 해주는 도구
GitHub : 클라우드에 있는 깃 제공자
            내 컴퓨터에서 깃 히스토리를 가져옴 -> 클라우드에 있는 깃허브에 푸쉬 -> 다른 사람이 이 파일을 가져올 수 있음
            깃 기록을 올리고 교환 가능
            많은 오픈소스 보기 가능

깃 사용 이유 : 1. 많은 사람들이 사용 2. 무료 3. 오픈소스 4. 빠름 5. 오프라인에서 사용 가능 6. 실수할 경우 복구 가능 7. 브랜치, 머지 사용 쉬움

add : 저장할 파일을 스테이지에 올림
commit : 스테이지에 올라온 파일을 내 컴퓨터에 저장    
            필요한 경우 commit한 시점으로 이동 가능
push : 저장한 내용을 공유하기 위해 github에 업로드

git reset 돌아갈 버전 주소 --hard : 이전 버전으로 돌아가고 그 뒤 히스토리 모두 삭제
git revert 돌아갈 버전 주소 : 파일 상태는 원하던 버전으로 바뀌고, 그 전 히스토리는 남아있음

branch : 일정 시점에서 branch를 생성하면 그 시점의 내용을 가지고 작업을 할 수 있으며, 그 시점의 내용은 훼손되지 않음

merge : branch 내용을 합치는 것
rebase : branch 하나로 재배치

